import module
import ../globals
import ../utils/utils
import ../synthInfos
import math

type
    OverflowModule* = ref object of SynthModule

proc constructOverflowModule*(): OverflowModule =
    var module = new OverflowModule
    module.outputs = @[Link(moduleIndex: -1, pinIndex: -1)]
    module.inputs = @[Link(moduleIndex: -1, pinIndex: -1)]
    return module

method synthesize*(module: OverflowModule, x: float64, pin: int): float64 =
    if(module.inputs[0].moduleIndex < 0): return 0
    let moduleA = synthInfos.moduleList[module.inputs[0].moduleIndex]
    if(moduleA == nil):
        return 0.0 
    else:
        let output = moduleA.synthesize(x, pin)
        if(output > 1): return floorMod(moduleA.synthesize(x, module.inputs[0].pinIndex), -1)
        if(output < -1): return floorMod(moduleA.synthesize(x, module.inputs[0].pinIndex), 1)
        return output