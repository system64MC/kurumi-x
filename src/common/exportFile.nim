import globals
import ../kurumiX/synthesizer/synthesizeWave
import ../kurumiX/synthesizer/synth
import flatty
import genericSynth
import ../kurumi3/synth/kurumi3Synth
import utils
import supersnappy
# import modules
# import serializationObject
# import serialization
import print
import strformat

import imgui

when not defined(emscripten): import tinydialogs
when not defined(emscripten): import os
when not defined(emscripten): import streams
when defined(emscripten): import jsbind/emscripten

import parseutils

import math
import browsers

proc getSampleRate(synth: GenericSynth): int =
    return int(floor((440 * float64(synth.synthInfos.waveDims.x)) / 2.0))



# proc threadedSynth( d: tuple[synth: Synth, seqOrder: int]) {.thread.} =
#     d.synth.synthInfos.macroFrame = d.seqOrder.int32
#     d.synth.synthesize()

# proc threadedUnserialize(d: tuple[synthSeq: ptr seq[Synth], data: string, index: int]) {.thread.} =
#     d.synthSeq[][d.index] = d.data.loadStateHistory()
#     d.synthSeq[][d.index].synthInfos.macroFrame = d.index.int32
#     d.synthSeq[][d.index].synthesize

# proc saveWavOld*(data: string, bits: int = 16, sequence: bool = false): void {.gcsafe.} =
#     let path = saveFileDialog("Export .WAV", getCurrentDir() / "\0", ["*.wav"], ".WAV files")
#     if(path == ""): return

#     var synth = loadStateHistory(data)
#     # var seqFrame = 0
     
#     let f = open(path, fmWrite)
#     defer: f.close()

#     var frames = 1
#     if sequence:
#         frames = synth.synthInfos.macroLen

#     var chunkSize = 0
#     if bits == 16:
#         chunkSize = 36 + (synth.synthInfos.waveDims.x * frames) * 2
#     else:
#         chunkSize = 36 + (synth.synthInfos.waveDims.x * frames)

#     var subchunkSize = 0
#     if bits == 16:
#         subchunkSize = (synth.synthInfos.waveDims.x * frames) * 2
#     else:
#         subchunkSize = (synth.synthInfos.waveDims.x * frames)

#     let sampleRate: int = synth.getSampleRate()
#     var byteRate = 0
#     if bits == 16:
#         byteRate = (sampleRate * 16) div 8
#     else:
#         byteRate = sampleRate

#     let header: seq[byte] = @[
#         0x52, 0x49, 0x46, 0x46, # ChunkID: "RIFF" in ASCII form, big endian
#         byte(chunkSize and 0xFF), byte((chunkSize shr 8) and 0xFF), byte((chunkSize shr 16) and 0xFF), byte(chunkSize shr 24), # ChunkSize - will be filled later,
#         0x57, 0x41, 0x56, 0x45, # Format: "WAVE" in ASCII form
#         0x66, 0x6d, 0x74, 0x20, # Subchunk1ID: "fmt " in ASCII form
#         0x10, 0x00, 0x00, 0x00, # Subchunk1Size: 16 for PCM
#         0x01, 0x00, # AudioFormat: PCM = 1
#         0x01, 0x00, # NumChannels: Mono = 1
#         byte(sampleRate and 0xFF), byte((sampleRate shr 8) and 0xFF), byte((sampleRate shr 16) and 0xFF), byte(sampleRate shr 24), # SampleRate: 44100 Hz - little endian
#         byte(byteRate and 0xFF), byte((byteRate shr 8) and 0xFF), byte((byteRate shr 16) and 0xFF), byte(byteRate shr 24), # ByteRate: 44100 * 1 * 16 / 8 - little endian
#         byte(bits div 8), 0x00, # BlockAlign: 1 * 16 / 8 - little endian
#         bits.byte, 0x00, # BitsPerSample: 16 bits per sample
#         0x64, 0x61, 0x74, 0x61, # Subchunk2ID: "data" in ASCII form
#         byte(subchunkSize and 0xFF), byte((subchunkSize shr 8) and 0xFF), byte((subchunkSize shr 16) and 0xFF), byte(subchunkSize shr 24), # Subchunk2Size - will be filled later
#     ]
    
#     discard f.writeBytes(header, 0, header.len)

#     let wavDiv = synth.synthInfos.waveDims.y.float64 / 2.0
#     let waveDiv05 = wavDiv + 0.5

#     if(sequence):
#         var synthSeq = newSeq[Synth](synth.synthInfos.macroLen)
#         var synthThreads = newSeq[Thread[tuple[synth: Synth, seqOrder: int]]](synth.synthInfos.macroLen)
#         var unserializeThreads = newSeq[Thread[tuple[synthSeq: ptr seq[Synth], data: string, index: int]]](synth.synthInfos.macroLen)
#         for i in 0..<unserializeThreads.len:
#             createThread(unserializeThreads[i], threadedUnserialize, (synthSeq.addr, data, i))
#         joinThreads(unserializeThreads)
#         echo "joining threads"

#         # for i in 0..<synth.synthInfos.macroLen:
#         #     synthSeq[i] = loadStateHistory(data)
#         # igOpenPopup("Exporting sequence")
#         let tmpMac = synth.synthInfos.macroFrame

#         # for i in 0..<synthThreads.len:
#         #     createThread(synthThreads[i], threadedSynth, (synthSeq[i], i))
#         # joinThreads(synthThreads)

#         for i in 0..<synth.synthInfos.macroLen:
#             let s = synthSeq[i]

#             for j in 0..<synth.synthInfos.waveDims.x:
#                 var sample = s.outputInt[j].float64
#                 if((s.synthInfos.waveDims.y and 0x0001) == 1):
#                     sample = sample / waveDiv05
#                 else:
#                     sample = sample / wavDiv
                
#                 if(bits == 16):
#                     let myOut = (round((sample - 1) * ((1 shl (16-1))-1).float64)).int16
#                     let b1 = (myOut and 0xFF).byte
#                     let b2 = (myOut shr 8).byte
#                     discard f.writeBytes(@[b1, b2], 0, 2)
#                     continue

#                 let myOut = (round((sample) * ((1 shl (8 - 1))).float64)).int16
#                 discard f.writeBytes(@[myOut.byte], 0, 1)
#             # drawPopup(seqFrame, synthContext.macroLen - 1)

#         # igCloseCurrentPopup()
#     else:
#         synth.synthesize()
#         for j in 0..<synth.synthInfos.waveDims.x:
#             var sample = synth.outputInt[j].float64
#             if((synth.synthInfos.waveDims.y and 0x0001) == 1):
#                 sample = sample / waveDiv05
#             else:
#                 sample = sample / wavDiv
            
#             if(bits == 16):
#                 let myOut = (round((sample - 1) * ((1 shl (16-1))-1).float64)).int16
#                 let b1 = (myOut and 0xFF).byte
#                 let b2 = (myOut shr 8).byte
#                 discard f.writeBytes(@[b1, b2], 0, 2)
#                 continue

#             let myOut = (round((sample) * ((1 shl (8 - 1))).float64)).int16
#             discard f.writeBytes(@[myOut.byte], 0, 1)
#     # notifyPopup("Kurumi-X", "WAV file " & path.splitFile().name & " exported!", IconType.Info)
#     discard messageBox("Kurumi-X", fmt"{path.splitFile().name}.wav is exported with success!", DialogType.Ok, IconType.Info, Button.Yes)


when not defined(emscripten):
    proc saveWav*(synth: GenericSynth, bits: int = 16, sequence: bool = false): void {.gcsafe.} =
        let path = saveFileDialog("Export .WAV", getCurrentDir() / "\0", ["*.wav"], ".WAV files")
        if(path == ""): return

        # var synth = loadStateHistory(data)
        # var seqFrame = 0
        
        let f = open(path, fmWrite)
        defer: f.close()

        var frames = 1
        if sequence:
            frames = synth.synthInfos.macroLen

        var chunkSize = 0
        if bits == 16:
            chunkSize = 36 + (synth.synthInfos.waveDims.x * frames) * 2
        else:
            chunkSize = 36 + (synth.synthInfos.waveDims.x * frames)

        var subchunkSize = 0
        if bits == 16:
            subchunkSize = (synth.synthInfos.waveDims.x * frames) * 2
        else:
            subchunkSize = (synth.synthInfos.waveDims.x * frames)

        let sampleRate: int = synth.getSampleRate()
        var byteRate = 0
        if bits == 16:
            byteRate = (sampleRate * 16) div 8
        else:
            byteRate = sampleRate

        let header: seq[byte] = @[
            0x52, 0x49, 0x46, 0x46, # ChunkID: "RIFF" in ASCII form, big endian
            byte(chunkSize and 0xFF), byte((chunkSize shr 8) and 0xFF), byte((chunkSize shr 16) and 0xFF), byte(chunkSize shr 24), # ChunkSize - will be filled later,
            0x57, 0x41, 0x56, 0x45, # Format: "WAVE" in ASCII form
            0x66, 0x6d, 0x74, 0x20, # Subchunk1ID: "fmt " in ASCII form
            0x10, 0x00, 0x00, 0x00, # Subchunk1Size: 16 for PCM
            0x01, 0x00, # AudioFormat: PCM = 1
            0x01, 0x00, # NumChannels: Mono = 1
            byte(sampleRate and 0xFF), byte((sampleRate shr 8) and 0xFF), byte((sampleRate shr 16) and 0xFF), byte(sampleRate shr 24), # SampleRate: 44100 Hz - little endian
            byte(byteRate and 0xFF), byte((byteRate shr 8) and 0xFF), byte((byteRate shr 16) and 0xFF), byte(byteRate shr 24), # ByteRate: 44100 * 1 * 16 / 8 - little endian
            byte(bits div 8), 0x00, # BlockAlign: 1 * 16 / 8 - little endian
            bits.byte, 0x00, # BitsPerSample: 16 bits per sample
            0x64, 0x61, 0x74, 0x61, # Subchunk2ID: "data" in ASCII form
            byte(subchunkSize and 0xFF), byte((subchunkSize shr 8) and 0xFF), byte((subchunkSize shr 16) and 0xFF), byte(subchunkSize shr 24), # Subchunk2Size - will be filled later
        ]
        
        discard f.writeBytes(header, 0, header.len)

        let wavDiv = synth.synthInfos.waveDims.y.float64 / 2.0
        let waveDiv05 = wavDiv + 0.5

        if(sequence):
            # igOpenPopup("Exporting sequence")
            let tmpMac = synth.synthInfos.macroFrame
            for i in 0..<synth.synthInfos.macroLen:
                synth.synthInfos.macroFrame = i
                # seqFrame = i
                synth.synthesize()

                for j in 0..<synth.synthInfos.waveDims.x:
                    var sample = synth.outputInt[j].float64
                    if((synth.synthInfos.waveDims.y and 0x0001) == 1):
                        sample = sample / waveDiv05
                    else:
                        sample = sample / wavDiv
                    
                    if(bits == 16):
                        let myOut = (round((sample - 1) * ((1 shl (16-1))-1).float64)).int16
                        let b1 = (myOut and 0xFF).byte
                        let b2 = (myOut shr 8).byte
                        discard f.writeBytes(@[b1, b2], 0, 2)
                        continue

                    let myOut = (round((sample) * ((1 shl (8 - 1))).float64)).int16
                    discard f.writeBytes(@[myOut.byte], 0, 1)
                # drawPopup(seqFrame, synthContext.macroLen - 1)

            synth.synthInfos.macroFrame = tmpMac
            synth.synthesize()
            # igCloseCurrentPopup()
        else:
            synth.synthesize()
            for j in 0..<synth.synthInfos.waveDims.x:
                var sample = synth.outputInt[j].float64
                if((synth.synthInfos.waveDims.y and 0x0001) == 1):
                    sample = sample / waveDiv05
                else:
                    sample = sample / wavDiv
                
                if(bits == 16):
                    let myOut = (round((sample - 1) * ((1 shl (16-1))-1).float64)).int16
                    let b1 = (myOut and 0xFF).byte
                    let b2 = (myOut shr 8).byte
                    discard f.writeBytes(@[b1, b2], 0, 2)
                    continue

                let myOut = (round((sample) * ((1 shl (8 - 1))).float64)).int16
                discard f.writeBytes(@[myOut.byte], 0, 1)
        # notifyPopup("Kurumi-X", "WAV file " & path.splitFile().name & " exported!", IconType.Info)
        discard messageBox("Kurumi-X", fmt"{path.splitFile().name}.wav is exported with success!", DialogType.Ok, IconType.Info, Button.Yes)
else:
    proc saveWav*(synth: GenericSynth, bits: int = 16, sequence: bool = false): void {.EMSCRIPTEN_KEEPALIVE.} =
        
        # var synth = loadStateHistory(data)

        var frames = 1
        if sequence:
            frames = synth.synthInfos.macroLen

        var chunkSize = 0
        if bits == 16:
            chunkSize = 36 + (synth.synthInfos.waveDims.x * frames) * 2
        else:
            chunkSize = 36 + (synth.synthInfos.waveDims.x * frames)

        var subchunkSize = 0
        if bits == 16:
            subchunkSize = (synth.synthInfos.waveDims.x * frames) * 2
        else:
            subchunkSize = (synth.synthInfos.waveDims.x * frames)

        let sampleRate: int = synth.getSampleRate()
        var byteRate = 0
        if bits == 16:
            byteRate = (sampleRate * 16) div 8
        else:
            byteRate = sampleRate

        var output: seq[byte] = @[
            0x52, 0x49, 0x46, 0x46, # ChunkID: "RIFF" in ASCII form, big endian
            byte(chunkSize and 0xFF), byte((chunkSize shr 8) and 0xFF), byte((chunkSize shr 16) and 0xFF), byte(chunkSize shr 24), # ChunkSize - will be filled later,
            0x57, 0x41, 0x56, 0x45, # Format: "WAVE" in ASCII form
            0x66, 0x6d, 0x74, 0x20, # Subchunk1ID: "fmt " in ASCII form
            0x10, 0x00, 0x00, 0x00, # Subchunk1Size: 16 for PCM
            0x01, 0x00, # AudioFormat: PCM = 1
            0x01, 0x00, # NumChannels: Mono = 1
            byte(sampleRate and 0xFF), byte((sampleRate shr 8) and 0xFF), byte((sampleRate shr 16) and 0xFF), byte(sampleRate shr 24), # SampleRate: 44100 Hz - little endian
            byte(byteRate and 0xFF), byte((byteRate shr 8) and 0xFF), byte((byteRate shr 16) and 0xFF), byte(byteRate shr 24), # ByteRate: 44100 * 1 * 16 / 8 - little endian
            byte(bits div 8), 0x00, # BlockAlign: 1 * 16 / 8 - little endian
            bits.byte, 0x00, # BitsPerSample: 16 bits per sample
            0x64, 0x61, 0x74, 0x61, # Subchunk2ID: "data" in ASCII form
            byte(subchunkSize and 0xFF), byte((subchunkSize shr 8) and 0xFF), byte((subchunkSize shr 16) and 0xFF), byte(subchunkSize shr 24), # Subchunk2Size - will be filled later
        ]

        let headOffset = output.len
        let sampleSize = if(bits == 16): 2 else: 1
        output.setLen(headOffset + frames * synth.synthInfos.wavedims.x * sampleSize)

        
        let wavDiv = synth.synthInfos.waveDims.y.float64 / 2.0
        let waveDiv05 = wavDiv + 0.5

        if(sequence):
            # igOpenPopup("Exporting sequence")
            let tmpMac = synth.synthInfos.macroFrame
            for i in 0..<synth.synthInfos.macroLen:
                synth.synthInfos.macroFrame = i
                # seqFrame = i
                synth.synthesize()

                for j in 0..<synth.synthInfos.waveDims.x:
                    var sample = synth.outputInt[j].float64
                    if((synth.synthInfos.waveDims.y and 0x0001) == 1):
                        sample = sample / waveDiv05
                    else:
                        sample = sample / wavDiv
                    
                    if(bits == 16):
                        let myOut = (round((sample - 1) * ((1 shl (16-1))-1).float64)).int16
                        let b1 = (myOut and 0xFF).byte
                        let b2 = (myOut shr 8).byte
                        output[headOffset + ((i * synth.synthInfos.waveDims.x) + j) * 2] = b1
                        output[headOffset + ((i * synth.synthInfos.waveDims.x) + j) * 2 + 1] = b2
                        continue

                    let myOut = (round((sample) * ((1 shl (8 - 1))).float64)).int16
                    output[headOffset + ((i * synth.synthInfos.waveDims.x) + j * 1)] = myOut.byte
                # drawPopup(seqFrame, synthContext.macroLen - 1)

            synth.synthInfos.macroFrame = tmpMac
            synth.synthesize()
            # igCloseCurrentPopup()
        else:
            synth.synthesize()
            for j in 0..<synth.synthInfos.waveDims.x:
                var sample = synth.outputInt[j].float64
                if((synth.synthInfos.waveDims.y and 0x0001) == 1):
                    sample = sample / waveDiv05
                else:
                    sample = sample / wavDiv
                
                if(bits == 16):
                    let myOut = (round((sample - 1) * ((1 shl (16-1))-1).float64)).int16
                    let b1 = (myOut and 0xFF).byte
                    let b2 = (myOut shr 8).byte
                    output[headOffset + (j) * 2] = b1
                    output[headOffset + (j) * 2 + 1] = b2
                    continue

                let myOut = (round((sample) * ((1 shl (8 - 1))).float64)).int16
                output[headOffset + (j) * 1] = myOut.byte
                
        downloadBytes(output[0].addr, output.len.int32, "output.wav")
    #     discard EM_ASM_INT("""
    
    # const a = document.createElement('a');
    # a.style = 'display:none';
    # document.body.appendChild(a);
    # var view = new Uint8Array(Module['wasmMemory'].buffer, $0, $1);
    # var result = new Uint8Array($1);
    # for(var i = 0; i < $1; i++) { result[i] = view[i]; }
    # var blob = new Blob([result], {
    #     type: 'application/octet-stream'
    # });
    # const url = URL.createObjectURL(blob);
    # a.href = url;
    # const filename = "output.wav";
    # a.download = filename;
    # a.click();
    # URL.revokeObjectURL(url);
    # document.body.removeChild(a);

    # """, output[0].addr, output.len.int32)
when not defined(emscripten):
    proc saveN163*(synth: GenericSynth, sequence: bool): void {.gcsafe.} =
        let path = saveFileDialog("Export .FTI", getCurrentDir() / "\0", ["*.fti"], ".FTI files")
        if(path == ""): return
        
        # var synth = loadStateHistory(data)
        let tmpLen = synth.synthInfos.waveDims.x
        let tmpHei = synth.synthInfos.waveDims.y

        if(tmpLen > 240):
            synth.synthInfos.waveDims.x = 240
        if(tmpHei > 15):
            synth.synthInfos.waveDims.y = 15
        synth.synthesize()

        var name = path.splitFile().name

        if name.len > 127:
            name = name.substr(0, 127)

        let f = open(path, fmWrite)
        defer: f.close()

        let header: seq[byte] = @[
            'F'.byte, 'T'.byte, 'I'.byte, '2'.byte, '.'.byte, '4'.byte, # Header
            0x05, # Instrument type, 05 for N163
            (name.len).byte, 0, 0, 0 # Length of name string
        ]

        discard f.writeBytes(header, 0, header.len)
        
        for c in name:
            discard f.writeBytes(@[c.byte], 0, 1)
        # discard f.writeBytes(@[0x00'u8], 0, 1)
        
        discard f.writeBytes(@[0x05'u8], 0, 1)

        discard f.writeBytes(@[0x00'u8], 0, 1)
        discard f.writeBytes(@[0x00'u8], 0, 1)
        discard f.writeBytes(@[0x00'u8], 0, 1)
        discard f.writeBytes(@[0x00'u8], 0, 1)

        var waveMacroEnabled = 0'u8
        if sequence:
            waveMacroEnabled = 1
        discard f.writeBytes(@[waveMacroEnabled], 0, 1)

        if(sequence):
            let macLen = min(synth.synthInfos.macroLen, 64)
            discard f.writeBytes(@[macLen.byte], 0, 1)
            
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)

            discard f.writeBytes(@[0xFF'u8], 0, 1)
            discard f.writeBytes(@[0xFF'u8], 0, 1)
            discard f.writeBytes(@[0xFF'u8], 0, 1)
            discard f.writeBytes(@[0xFF'u8], 0, 1)
            discard f.writeBytes(@[0xFF'u8], 0, 1)
            discard f.writeBytes(@[0xFF'u8], 0, 1)
            discard f.writeBytes(@[0xFF'u8], 0, 1)
            discard f.writeBytes(@[0xFF'u8], 0, 1)

            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)

            for i in 0..<macLen:
                discard f.writeBytes(@[i.byte], 0, 1)

            discard f.writeBytes(@[synth.synthInfos.waveDims.x.byte], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)

            discard f.writeBytes(@[macLen.byte], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            
            let tmpMac = synth.synthInfos.macroFrame
            for m in 0..<macLen:
                synth.synthInfos.macroFrame = m
                synth.synthesize()

                for i in 0..<synth.synthInfos.waveDims.x:
                    let smp = synth.outputInt[i]
                    discard f.writeBytes(@[smp.byte], 0, 1)

            synth.synthInfos.macroFrame = tmpMac

        else:
            discard f.writeBytes(@[synth.synthInfos.waveDims.x.byte], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)

            discard f.writeBytes(@[0x01'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            discard f.writeBytes(@[0x00'u8], 0, 1)
            for i in 0..<synth.synthInfos.waveDims.x:
                    let smp = synth.outputInt[i]
                    discard f.writeBytes(@[smp.byte], 0, 1)

        synth.synthInfos.waveDims.x = tmpLen
        synth.synthInfos.waveDims.y = tmpHei
        synth.synthesize()
        notifyPopup("Kurumi-X", "FTI instrument " & name & " exported!", IconType.Info)
        discard messageBox("Kurumi-X", fmt"FTI instrument {path.splitFile().name}.fti is exported with success!", DialogType.Ok, IconType.Info, Button.Yes)
else:
    proc saveN163*(synth: GenericSynth, sequence: bool): void {.EMSCRIPTEN_KEEPALIVE.} =
        # var synth = loadStateHistory(data)
        let tmpLen = synth.synthInfos.waveDims.x
        let tmpHei = synth.synthInfos.waveDims.y

        if(tmpLen > 240):
            synth.synthInfos.waveDims.x = 240
        if(tmpHei > 15):
            synth.synthInfos.waveDims.y = 15
        synth.synthesize()

        var waveMacroEnabled = 0'u8
        if sequence:
            waveMacroEnabled = 1

        var output: seq[byte] = @[
            'F'.byte, 'T'.byte, 'I'.byte, '2'.byte, '.'.byte, '4'.byte, # Header
            0x05, # Instrument type, 05 for N163
            (6).byte, 0, 0, 0, # Length of name string
            'K'.byte, 'u'.byte, 'r'.byte, 'u'.byte, 'm'.byte, 'i'.byte,
            0x05,
            0x00,
            0x00,
            0x00,
            0x00,
            waveMacroEnabled,
        ]

        if(sequence):
            let macLen = min(synth.synthInfos.macroLen, 64).byte
            output.add([
                macLen,
                0x00,
                0x00,
                0x00,

                0xFF,
                0xFF,
                0xFF,
                0xFF,
                0xFF,
                0xFF,
                0xFF,
                0xFF,

                0x00,
                0x00,
                0x00,
                0x00,
            ])
            var wMacro = newSeq[byte](macLen)
            for i in 0..<macLen.int32:
                wMacro[i] = i.byte
            output.add(wMacro)
            output.add([
                synth.synthInfos.waveDims.x.byte,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                
                macLen,
                0x00,
                0x00,
                0x00,
            ])

            var tmpBuf = newSeq[byte](synth.synthInfos.waveDims.x * macLen.int)
            for m in 0..<macLen.int32:
                synth.synthInfos.macroFrame = m
                synth.synthesize()

                for i in 0..<synth.synthInfos.waveDims.x:
                    let smp = synth.outputInt[i]
                    tmpBuf[(m * synth.synthInfos.waveDims.x) + i] = smp.byte

            output.add(tmpBuf)

        else:
            output.add([
                synth.synthInfos.waveDims.x.byte,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                
                0x00,
                0x00,
                0x00,
                0x00,
            ])
            var tmpBuf = newSeq[byte](synth.synthInfos.waveDims.x)

            for i in 0..<synth.synthInfos.waveDims.x:
                let smp = synth.outputInt[i]
                tmpBuf[i] = smp.byte
            
            output.add(tmpBuf)
        downloadBytes(output[0].addr, output.len.int32, "output.fti")
        

const FURNACE_FORMAT_VER: uint16 = 143

when not defined(emscripten):
    proc saveFUW*(synth: GenericSynth): void {.gcsafe.} =
        let path = saveFileDialog("Export .FUW", getCurrentDir() / "\0", ["*.fuw"], ".FUW files")
        
        let f = open(path, fmWrite)
        defer: f.close()
        # var synth = loadStateHistory(data)
        let size: uint32 = 1 + 4 + 4 + 4 + (4 * synth.synthInfos.waveDims.x).uint32
        const HEADER_SIZE = 16 + 2 + 2 + 4 + 4 + 1 + 4 + 4 + 4

        let header: seq[byte] = @[
            '-'.byte, 'F'.byte, 'u'.byte, 'r'.byte, 'n'.byte, 'a'.byte, 'c'.byte, 'e'.byte, ' '.byte, 'w'.byte, 'a'.byte, 'v'.byte, 'e'.byte, 't'.byte, 'a'.byte, '-'.byte, # Header, 16 bytes
            byte(FURNACE_FORMAT_VER and 0xFF), byte(FURNACE_FORMAT_VER shr 8), # Format version, 2 bytes
            '0'.byte, '0'.byte, # Reserved, 2 bytes
            'W'.byte, 'A'.byte, 'V'.byte, 'E'.byte, # WAVE chunk, 4 bytes
            byte(size and 0xFF), byte((size shr 8) and 0xFF), byte((size shr 16) and 0xFF), byte((size shr 24)), # Size of chunk, 4 bytes
            0, # empty string, 1 byte
            byte(synth.synthInfos.waveDims.x and 0xFF), byte((synth.synthInfos.waveDims.x shr 8) and 0xFF), byte((synth.synthInfos.waveDims.x shr 16) and 0xFF), byte((synth.synthInfos.waveDims.x shr 24)), # Wave length, 4 bytes
            0, 0, 0, 0, # Reserved, 4 bytes
            byte(synth.synthInfos.waveDims.y and 0xFF), byte((synth.synthInfos.waveDims.y shr 8) and 0xFF), byte((synth.synthInfos.waveDims.y shr 16) and 0xFF), byte((synth.synthInfos.waveDims.y shr 24)), # Wave height, 4 bytes
        ]

        discard f.writeBytes(header, 0, header.len)

        for i in 0..<synth.synthInfos.waveDims.x:
            let smp = synth.outputInt[i]
            discard f.writeBytes(@[(smp and 0xFF).byte], 0, 1)
            discard f.writeBytes(@[((smp shr 8) and 0xFF).byte], 0, 1)
            discard f.writeBytes(@[((smp shr 16) and 0xFF).byte], 0, 1)
            discard f.writeBytes(@[((smp shr 25)).byte], 0, 1)

        notifyPopup("Kurumi-X", "FUW file " & path.splitFile().name & " exported!", IconType.Info)
else:
    proc saveFUW*(synth: GenericSynth): void {.EMSCRIPTEN_KEEPALIVE.} =
        # var synth = loadStateHistory(data)
        let size: uint32 = 1 + 4 + 4 + 4 + (4 * synth.synthInfos.waveDims.x).uint32
        const HEADER_SIZE = 16 + 2 + 2 + 4 + 4 + 1 + 4 + 4 + 4

        var output: seq[byte] = @[
            '-'.byte, 'F'.byte, 'u'.byte, 'r'.byte, 'n'.byte, 'a'.byte, 'c'.byte, 'e'.byte, ' '.byte, 'w'.byte, 'a'.byte, 'v'.byte, 'e'.byte, 't'.byte, 'a'.byte, '-'.byte, # Header, 16 bytes
            byte(FURNACE_FORMAT_VER and 0xFF), byte(FURNACE_FORMAT_VER shr 8), # Format version, 2 bytes
            '0'.byte, '0'.byte, # Reserved, 2 bytes
            'W'.byte, 'A'.byte, 'V'.byte, 'E'.byte, # WAVE chunk, 4 bytes
            byte(size and 0xFF), byte((size shr 8) and 0xFF), byte((size shr 16) and 0xFF), byte((size shr 24)), # Size of chunk, 4 bytes
            0, # empty string, 1 byte
            byte(synth.synthInfos.waveDims.x and 0xFF), byte((synth.synthInfos.waveDims.x shr 8) and 0xFF), byte((synth.synthInfos.waveDims.x shr 16) and 0xFF), byte((synth.synthInfos.waveDims.x shr 24)), # Wave length, 4 bytes
            0, 0, 0, 0, # Reserved, 4 bytes
            byte(synth.synthInfos.waveDims.y and 0xFF), byte((synth.synthInfos.waveDims.y shr 8) and 0xFF), byte((synth.synthInfos.waveDims.y shr 16) and 0xFF), byte((synth.synthInfos.waveDims.y shr 24)), # Wave height, 4 bytes
        ]

        var tmpBuf = newSeq[byte](synth.synthInfos.waveDims.x * 4)

        for i in 0..<synth.synthInfos.waveDims.x.int32:
            let smp = synth.outputInt[i]
            tmpBuf[i * 4 + 0] = (smp and 0xFF).byte
            tmpBuf[i * 4 + 1] = ((smp shr 8) and 0xFF).byte
            tmpBuf[i * 4 + 2] = ((smp shr 16) and 0xFF).byte
            tmpBuf[i * 4 + 3] = (smp shr 25).byte

        output.add(tmpBuf)
        downloadBytes(output[0].addr, output.len.int32, "output.fuw")

when defined(emscripten):
    import jsbind.emscripten
    proc openTab(url: string) {.EMSCRIPTEN_KEEPALIVE.} =
        discard EM_ASM_INT("""window.open(UTF8ToString($0));""", url.cstring)

proc saveDMW*(): void =
    when not defined(emscripten):
        openDefaultBrowser("https://tildearrow.org/?p=post&month=5&year=2021&item=delek")
        openDefaultBrowser("https://tildearrow.org/?p=post&month=7&year=2022&item=deflebrain")
        openDefaultBrowser("https://github.com/tildearrow/furnace")
        return
    else:
        openTab("https://tildearrow.org/?p=post&month=5&year=2021&item=delek")
        openTab("https://tildearrow.org/?p=post&month=7&year=2022&item=deflebrain")
        openTab("https://github.com/tildearrow/furnace")

when not defined(emscripten):
    proc saveGenerator*(synth: GenericSynth) {.gcsafe.} =


        let path = saveFileDialog("Export .SUNSYNTH (Generator)", getCurrentDir() / "\0", ["*.sunsynth"], ".SUNSYNTH files")
        if(path == ""): return
        
        # var synth = loadStateHistory(data)
        let tmpLen = synth.synthInfos.waveDims.x
        let tmpHei = synth.synthInfos.waveDims.y

        if(tmpLen != 32):
            synth.synthInfos.waveDims.x = 32
        if(tmpHei != 254):
            synth.synthInfos.waveDims.y = 254
        synth.synthesize()

        var name = path.splitFile().name

        if name.len > 31:
            name = name.substr(0, 31)

        let f = open(path, fmWrite)
        defer: f.close()

        var module = [
            0x53'u8, 0x53, 0x59, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x56,     0x45, 0x52, 0x53, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x01'u8, 0x01, 0x02, 0x53, 0x46, 0x46, 0x46, 0x04,     0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x02, 0x53, 
            0x4E'u8, 0x41, 0x4D, 0x20, 0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53,     0x54, 0x59, 0x50, 0x0A, 0x00, 0x00, 0x00, 0x47, 
            0x65'u8, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x6F, 0x72,     0x00, 0x53, 0x46, 0x49, 0x4E, 0x04, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x53, 0x52, 0x45,     0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00'u8, 0x53, 0x53, 0x43, 0x4C, 0x04, 0x00, 0x00,     0x00, 0x00, 0x01, 0x00, 0x00, 0x53, 0x43, 0x4F, 
            0x4C'u8, 0x03, 0x00, 0x00, 0x00, 0x05, 0xFF, 0x00,     0x53, 0x4D, 0x49, 0x49, 0x04, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x53, 0x4D, 0x49, 0x43,     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x53'u8, 0x4D, 0x49, 0x42, 0x04, 0x00, 0x00, 0x00,     0xFF, 0xFF, 0xFF, 0xFF, 0x53, 0x4D, 0x49, 0x50, 
            0x04'u8, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,     0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x80'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,     0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,     0x80, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,     0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,     0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,     0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,     0x04, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00, 
            0x43'u8, 0x4D, 0x49, 0x44, 0x50, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,     0x43, 0x48, 0x4E, 0x4B, 0x04, 0x00, 0x00, 0x00, 
            0x04'u8, 0x00, 0x00, 0x00, 0x43, 0x48, 0x4E, 0x4D,     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x43'u8, 0x48, 0x44, 0x54, 0x20, 0x00, 0x00, 0x00,     0x81, 0x20, 0x39, 0x4E, 0x57, 0x89, 0x6A, 0x72, 
            0x0D'u8, 0xA7, 0xCF, 0xDD, 0xFB, 0x20, 0x54, 0x3E,     0xCD, 0xE0, 0xFB, 0x15, 0x28, 0x49, 0x64, 0x77, 
            0x10'u8, 0xF3, 0xF8, 0x18, 0x2E, 0x3E, 0xF8, 0x7F,     0x43, 0x48, 0x46, 0x52, 0x04, 0x00, 0x00, 0x00, 
            0x44'u8, 0xAC, 0x00, 0x00, 0x53, 0x45, 0x4E, 0x44,     0x00, 0x00, 0x00, 0x00
        ]

        for i in 0..<name.len:
            module[40 + i] = name[i].byte

        synth.synthesize()
        for i in 0..<32:
            let smp = synth.outputInt[i]
            module[425 + i] = cast[uint8](smp - 127)

        discard f.writeBytes(module, 0, module.len)
        notifyPopup("Kurumi-X", "SUNSYNTH Generator file " & path.splitFile().name & " exported!", IconType.Info)

else:
    proc saveGenerator*(synth: GenericSynth) {.EMSCRIPTEN_KEEPALIVE.} =
        
        # var synth = loadStateHistory(data)
        let tmpLen = synth.synthInfos.waveDims.x
        let tmpHei = synth.synthInfos.waveDims.y

        if(tmpLen != 32):
            synth.synthInfos.waveDims.x = 32
        if(tmpHei != 254):
            synth.synthInfos.waveDims.y = 254
        synth.synthesize()

        const name = "Gen. Kurumi"


        var module = [
            0x53'u8, 0x53, 0x59, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x56,     0x45, 0x52, 0x53, 0x04, 0x00, 0x00, 0x00, 0x00'u8, 
            0x01'u8, 0x01, 0x02, 0x53, 0x46, 0x46, 0x46, 0x04,     0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x02, 0x53, 
            0x4E'u8, 0x41, 0x4D, 0x20, 0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53,     0x54, 0x59, 0x50, 0x0A, 0x00, 0x00, 0x00, 0x47, 
            0x65'u8, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x6F, 0x72,     0x00, 0x53, 0x46, 0x49, 0x4E, 0x04, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x53, 0x52, 0x45,     0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00'u8, 0x53, 0x53, 0x43, 0x4C, 0x04, 0x00, 0x00,     0x00, 0x00, 0x01, 0x00, 0x00, 0x53, 0x43, 0x4F, 
            0x4C'u8, 0x03, 0x00, 0x00, 0x00, 0x05, 0xFF, 0x00,     0x53, 0x4D, 0x49, 0x49, 0x04, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x53, 0x4D, 0x49, 0x43,     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x53'u8, 0x4D, 0x49, 0x42, 0x04, 0x00, 0x00, 0x00,     0xFF, 0xFF, 0xFF, 0xFF, 0x53, 0x4D, 0x49, 0x50, 
            0x04'u8, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,     0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x80'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,     0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,     0x80, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,     0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,     0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,     0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,     0x04, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00, 
            0x43'u8, 0x4D, 0x49, 0x44, 0x50, 0x00, 0x00, 0x00,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,     0x43, 0x48, 0x4E, 0x4B, 0x04, 0x00, 0x00, 0x00, 
            0x04'u8, 0x00, 0x00, 0x00, 0x43, 0x48, 0x4E, 0x4D,     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x43'u8, 0x48, 0x44, 0x54, 0x20, 0x00, 0x00, 0x00,     0x81, 0x20, 0x39, 0x4E, 0x57, 0x89, 0x6A, 0x72, 
            0x0D'u8, 0xA7, 0xCF, 0xDD, 0xFB, 0x20, 0x54, 0x3E,     0xCD, 0xE0, 0xFB, 0x15, 0x28, 0x49, 0x64, 0x77, 
            0x10'u8, 0xF3, 0xF8, 0x18, 0x2E, 0x3E, 0xF8, 0x7F,     0x43, 0x48, 0x46, 0x52, 0x04, 0x00, 0x00, 0x00, 
            0x44'u8, 0xAC, 0x00, 0x00, 0x53, 0x45, 0x4E, 0x44,     0x00, 0x00, 0x00, 0x00
        ]

        for i in 0..<name.len:
            module[40 + i] = name[i].byte

        synth.synthesize()
        for i in 0..<32:
            let smp = synth.outputInt[i]
            module[425 + i] = cast[uint8](smp - 127)

        downloadBytes(module[0].addr, module.len, "output.sunsynth")

when not defined(emscripten):
    proc saveAnalogGenerator*(synth: GenericSynth) {.gcsafe.} =


        let path = saveFileDialog("Export .SUNSYNTH (Generator)", getCurrentDir() / "\0", ["*.sunsynth"], ".SUNSYNTH files")
        if(path == ""): return
        
        # var synth = loadStateHistory(data)
        let tmpLen = synth.synthInfos.waveDims.x
        let tmpHei = synth.synthInfos.waveDims.y

        if(tmpLen != 32):
            synth.synthInfos.waveDims.x = 32
        if(tmpHei != 254):
            synth.synthInfos.waveDims.y = 254
        synth.synthesize()

        var name = path.splitFile().name

        if name.len > 31:
            name = name.substr(0, 31)

        let f = open(path, fmWrite)
        defer: f.close()

        var module = [
            0x53'u8, 0x53, 0x59, 0x4E, 0x00, 0x00, 0x00, 0x00,      0x56, 0x45, 0x52, 0x53, 0x04, 0x00, 0x00, 0x00,
            0x00'u8, 0x01, 0x01, 0x02, 0x53, 0x46, 0x46, 0x46,      0x04, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x02, 
            0x53'u8, 0x4E, 0x41, 0x4D, 0x20, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x53, 0x54, 0x59, 0x50, 0x11, 0x00, 0x00, 0x00, 
            0x41'u8, 0x6E, 0x61, 0x6C, 0x6F, 0x67, 0x20, 0x67,      0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x6F, 0x72, 
            0x00'u8, 0x53, 0x46, 0x49, 0x4E, 0x04, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x52, 0x45, 
            0x4C'u8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x00, 0x53, 0x53, 0x43, 0x4C, 0x04, 0x00, 0x00, 
            0x00'u8, 0x00, 0x01, 0x00, 0x00, 0x53, 0x43, 0x4F,      0x4C, 0x03, 0x00, 0x00, 0x00, 0xAE, 0xFF, 0x00, 
            0x53'u8, 0x4D, 0x49, 0x49, 0x04, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x53, 0x4D, 0x49, 0x43, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x53, 0x4D, 0x49, 0x42, 0x04, 0x00, 0x00, 0x00, 
            0xFF'u8, 0xFF, 0xFF, 0xFF, 0x53, 0x4D, 0x49, 0x50,      0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0x50, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,      0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x80'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,      0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x01'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,      0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0xE8, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0xB0'u8, 0x36, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0x10, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,      0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,      0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x43, 0x4D, 0x49, 0x44, 0xB0, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x43'u8, 0x48, 0x4E, 0x4B, 0x04, 0x00, 0x00, 0x00,      0x04, 0x00, 0x00, 0x00, 0x43, 0x48, 0x4E, 0x4D, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x43, 0x48, 0x44, 0x54, 0x20, 0x00, 0x00, 0x00, 
            0x7F'u8, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,      0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
            0x7F'u8, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,      0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
            0x43'u8, 0x48, 0x46, 0x52, 0x04, 0x00, 0x00, 0x00,      0x44, 0xAC, 0x00, 0x00, 0x43, 0x48, 0x4E, 0x4D, 
            0x04'u8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,      0x43, 0x48, 0x44, 0x54, 0x0E, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x45, 
            0x4E'u8, 0x44, 0x00, 0x00, 0x00, 0x00      
        ]

        for i in 0..<name.len:
            module[40 + i] = name[i].byte

        synth.synthesize()
        for i in 0..<32:
            let smp = synth.outputInt[i]
            module[0x2A0 + i] = cast[uint8](smp - 127)

        discard f.writeBytes(module, 0, module.len)
        notifyPopup("Kurumi-X", "SUNSYNTH Analog Generator file " & path.splitFile().name & " exported!", IconType.Info)

else:
    proc saveAnalogGenerator*(synth: GenericSynth) {.EMSCRIPTEN_KEEPALIVE.} =
        
        # var synth = loadStateHistory(data)
        let tmpLen = synth.synthInfos.waveDims.x
        let tmpHei = synth.synthInfos.waveDims.y

        if(tmpLen != 32):
            synth.synthInfos.waveDims.x = 32
        if(tmpHei != 254):
            synth.synthInfos.waveDims.y = 254
        synth.synthesize()

        const name = "Analog. Gen. Kurumi"


        var module = [
            0x53'u8, 0x53, 0x59, 0x4E, 0x00, 0x00, 0x00, 0x00,      0x56, 0x45, 0x52, 0x53, 0x04, 0x00, 0x00, 0x00,
            0x00'u8, 0x01, 0x01, 0x02, 0x53, 0x46, 0x46, 0x46,      0x04, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x02, 
            0x53'u8, 0x4E, 0x41, 0x4D, 0x20, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x53, 0x54, 0x59, 0x50, 0x11, 0x00, 0x00, 0x00, 
            0x41'u8, 0x6E, 0x61, 0x6C, 0x6F, 0x67, 0x20, 0x67,      0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x6F, 0x72, 
            0x00'u8, 0x53, 0x46, 0x49, 0x4E, 0x04, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x52, 0x45, 
            0x4C'u8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x00, 0x53, 0x53, 0x43, 0x4C, 0x04, 0x00, 0x00, 
            0x00'u8, 0x00, 0x01, 0x00, 0x00, 0x53, 0x43, 0x4F,      0x4C, 0x03, 0x00, 0x00, 0x00, 0xAE, 0xFF, 0x00, 
            0x53'u8, 0x4D, 0x49, 0x49, 0x04, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x53, 0x4D, 0x49, 0x43, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x53, 0x4D, 0x49, 0x42, 0x04, 0x00, 0x00, 0x00, 
            0xFF'u8, 0xFF, 0xFF, 0xFF, 0x53, 0x4D, 0x49, 0x50,      0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0x50, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,      0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x80'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,      0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x01'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,      0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0xE8, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0xB0'u8, 0x36, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0x10, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,      0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C,      0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 
            0x43'u8, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x43, 0x4D, 0x49, 0x44, 0xB0, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 
            0x43'u8, 0x48, 0x4E, 0x4B, 0x04, 0x00, 0x00, 0x00,      0x04, 0x00, 0x00, 0x00, 0x43, 0x48, 0x4E, 0x4D, 
            0x04'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x43, 0x48, 0x44, 0x54, 0x20, 0x00, 0x00, 0x00, 
            0x7F'u8, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,      0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
            0x7F'u8, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,      0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 
            0x43'u8, 0x48, 0x46, 0x52, 0x04, 0x00, 0x00, 0x00,      0x44, 0xAC, 0x00, 0x00, 0x43, 0x48, 0x4E, 0x4D, 
            0x04'u8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,      0x43, 0x48, 0x44, 0x54, 0x0E, 0x00, 0x00, 0x00, 
            0x00'u8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x45, 
            0x4E'u8, 0x44, 0x00, 0x00, 0x00, 0x00      
        ]

        for i in 0..<name.len:
            module[40 + i] = name[i].byte

        synth.synthesize()
        for i in 0..<32:
            let smp = synth.outputInt[i]
            module[0x2A0 + i] = cast[uint8](smp - 127)

        downloadBytes(module[0].addr, module.len, "output.sunsynth")


when not defined(emscripten):
    proc saveFMX*(synth: GenericSynth) {.gcsafe.} =


        let path = saveFileDialog("Export .SUNSYNTH (FMX)", getCurrentDir() / "\0", ["*.sunsynth"], ".SUNSYNTH files")
        if(path == ""): return
        
        # var synth = loadStateHistory(data)
        let tmpLen = synth.synthInfos.waveDims.x

        if(tmpLen != 256):
            synth.synthInfos.waveDims.x = 256

        synth.synthesize()

        var name = path.splitFile().name

        if name.len > 31:
            name = name.substr(0, 31)

        let f = open(path, fmWrite)
        defer: f.close()

        var module = [
            0x53'u8, 0x53, 0x59, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x56, 0x45, 0x52, 0x53, 0x04, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x01, 0x02, 0x53, 0x46, 0x46, 0x46, 0x04, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x02, 
            0x53, 0x4E, 0x41, 0x4D, 0x20, 0x00, 0x00, 0x00, 0x46, 0x4D, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x54, 0x59, 0x50, 0x04, 0x00, 0x00, 0x00, 
            0x46, 0x4D, 0x58, 0x00, 0x53, 0x46, 0x49, 0x4E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x53, 0x52, 0x45, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x53, 0x43, 0x4C, 
            0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x53, 0x43, 0x4F, 0x4C, 0x03, 0x00, 0x00, 0x00, 
            0x00, 0x9B, 0xFF, 0x53, 0x4D, 0x49, 0x49, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 
            0x4D, 0x49, 0x43, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x4D, 0x49, 0x42, 0x04, 
            0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x53, 0x4D, 0x49, 0x50, 0x04, 0x00, 0x00, 0x00, 0xFF, 
            0xFF, 0xFF, 0xFF, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x4A, 0x25, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x04, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x02, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x80, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x68, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE5, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE5, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE5, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x43, 0x4D, 0x49, 0x44, 0xB8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x43, 0x48, 0x4E, 0x4B, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x43, 0x48, 0x4E, 0x4D, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x48, 0x44, 0x54, 0x00, 0x04, 0x00, 0x00, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0x53, 0x45, 0x4E, 0x44, 0x00, 0x00, 0x00, 0x00
        ]

        for i in 0..<name.len:
            module[40 + i] = name[i].byte

        let heiFloat = synth.synthInfos.waveDims.y.float32
        synth.synthesize()
        for i in 0..<256:
            let smp = synth.outputInt[i].float32
            let smpFloat = cast[uint32](smp / heiFloat)
            module[0xA27 + (i * 4) + 0] = (smpFloat and 0xFF).byte
            module[0xA27 + (i * 4) + 1] = ((smpFloat shr 8) and 0xFF).byte
            module[0xA27 + (i * 4) + 2] = ((smpFloat shr 16) and 0xFF).byte
            module[0xA27 + (i * 4) + 3] = (smpFloat shr 24).byte

        discard f.writeBytes(module, 0, module.len)
        notifyPopup("Kurumi-X", "SUNSYNTH Analog Generator file " & path.splitFile().name & " exported!", IconType.Info)

else:
    proc saveFMX*(synth: GenericSynth) {.EMSCRIPTEN_KEEPALIVE.} =
        
        # var synth = loadStateHistory(data)
        let tmpLen = synth.synthInfos.waveDims.x
        let tmpHei = synth.synthInfos.waveDims.y

        if(tmpLen != 256):
            synth.synthInfos.waveDims.x = 256
        synth.synthesize()

        const name = "FMX Kurumi"


        var module = [
            0x53'u8, 0x53, 0x59, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x56, 0x45, 0x52, 0x53, 0x04, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x01, 0x02, 0x53, 0x46, 0x46, 0x46, 0x04, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x02, 
            0x53, 0x4E, 0x41, 0x4D, 0x20, 0x00, 0x00, 0x00, 0x46, 0x4D, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x54, 0x59, 0x50, 0x04, 0x00, 0x00, 0x00, 
            0x46, 0x4D, 0x58, 0x00, 0x53, 0x46, 0x49, 0x4E, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x53, 0x52, 0x45, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x53, 0x43, 0x4C, 
            0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x53, 0x43, 0x4F, 0x4C, 0x03, 0x00, 0x00, 0x00, 
            0x00, 0x9B, 0xFF, 0x53, 0x4D, 0x49, 0x49, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 
            0x4D, 0x49, 0x43, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x4D, 0x49, 0x42, 0x04, 
            0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x53, 0x4D, 0x49, 0x50, 0x04, 0x00, 0x00, 0x00, 0xFF, 
            0xFF, 0xFF, 0xFF, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x4A, 0x25, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x04, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x02, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x80, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x68, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 
            0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 
            0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 
            0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE5, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE5, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE5, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x43, 0x56, 0x41, 0x4C, 0x04, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x43, 0x4D, 0x49, 0x44, 0xB8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x43, 0x48, 0x4E, 0x4B, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x43, 0x48, 0x4E, 0x4D, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x48, 0x44, 0x54, 0x00, 0x04, 0x00, 0x00, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0x53, 0x45, 0x4E, 0x44, 0x00, 0x00, 0x00, 0x00
        ]

        for i in 0..<name.len:
            module[40 + i] = name[i].byte

        let heiFloat = synth.synthInfos.waveDims.y.float32
        synth.synthesize()
        for i in 0..<256:
            let smp = synth.outputInt[i].float32
            let smpFloat = cast[uint32](((smp / heiFloat) * 2) - 1)
            module[0xA27 + (i * 4) + 0] = (smpFloat and 0xFF).byte
            module[0xA27 + (i * 4) + 1] = ((smpFloat shr 8) and 0xFF).byte
            module[0xA27 + (i * 4) + 2] = ((smpFloat shr 16) and 0xFF).byte
            module[0xA27 + (i * 4) + 3] = (smpFloat shr 24).byte

        downloadBytes(module[0].addr, module.len, "output.sunsynth")

# TODO : Maybe I can make emscripten code multithreaded bu passing arrays through a channel.
# Once the channel receives the array, I do the saving process.